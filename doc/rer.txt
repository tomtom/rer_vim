*rer.txt*       Interact with R via the rescreen vim plugin
                Author: Thomas Link, micathom AT gmail com?subject=vim

Features:

    - Send code to R via |rescreen.txt| (<C-CR>, <C-S-CR>)
        - If |g:rer#client_name| is 'rescreen', gx is defined as 
          operator too.
    - 'omnifunc' completion (|i_CTRL-X_CTRL-O|; works also for function 
      arguments)
    - Use |K| to display informatin on an identifier
    - Source the current buffer (nmap: <LocalLeader>rs)
    - Debug/Undebug a function (n/vmap: <LocalLeader>rd)
    - Display function arguments (n/vmap: <LocalLeader>rf)
    - Show a summary for the word under cursor (nmap: <LocalLeader>rm)
    - Show examples for the word under cursor (nmap: <LocalLeader>re)
    - Run an R function on the word under cursor (nmap: <LocalLeader>rr)
    - Experimental: Set/unset breakpoints (nmap: <LocalLeader>rb)
    - |:Rer| command to send code to R
    - |:Rcd| command to set R working directory to the current buffer 
      (nmap: <LocalLeader>rcd)

The map prefix (<LocalLeader>r) is user-configurable via |g:rer#mapleader|.

This plugin was tested on Linux (Ubuntu) & Windows. On Windows, this plugin 
assumes the use of the native Windows version of R (or rather Rterm) and of 
the Cygwin port of the screen utility.


-----------------------------------------------------------------------
Install~

To install the vimball, edit the vba file and type: >

    :so %

See `:help vimball` for details.

To install from github, please use a plugin manager like enable_vim, pathogen, 
VAM, Vundle, NeoBundle, vim-plug, vim-unbundle etc.

Dependencies:
    - This script requires tlib_vim (vimscript #1863) to be installed 
      (https://github.com/tomtom/tlib_vim).
    - If |g:rer#client_name| is 'rescreen', the rescreen_vim plugin is 
      required too (https://github.com/tomtom/rescreen_vim).

Also available on https://github.com/tomtom/rer_vim


========================================================================
Contents~

        :Rer ................................. |:Rer|
        n_K .................................. |n_K|
        n_<LocalLeader>K ..................... |n_<LocalLeader>K|
        :Rerhelp ............................. |:Rerhelp|
        :Rcd ................................. |:Rcd|
        :Rsource ............................. |:Rsource|
        :Rdebug .............................. |:Rdebug|
        :Rdebugger ........................... |:Rdebugger|
        :RBreakpoint ......................... |:RBreakpoint|
        :RResetBreakpoints ................... |:RResetBreakpoints|
        :Rtags ............................... |:Rtags|
        n_<c-r><c-r> ......................... |n_<c-r><c-r>|
        i_<c-r><c-r> ......................... |i_<c-r><c-r>|
        x_<c-r><c-r> ......................... |x_<c-r><c-r>|
        s_<c-r><c-r> ......................... |s_<c-r><c-r>|
        n_<c-r><c-s> ......................... |n_<c-r><c-s>|
        n_<c-r><c-e> ......................... |n_<c-r><c-e>|
        <c-r>1 ............................... |<c-r>1|
        g:rer#quicklist ...................... |g:rer#quicklist|
        g:rer#client_name .................... |g:rer#client_name|
        g:rer#mapleader ...................... |g:rer#mapleader|
        g:rer#support_maps ................... |g:rer#support_maps|
        g:rer#map_eval ....................... |g:rer#map_eval|
        g:rer#map_eval_and_print ............. |g:rer#map_eval_and_print|
        g:rer#convert_path ................... |g:rer#convert_path|
        g:rer#highlight_debug ................ |g:rer#highlight_debug|
        g:rer#highlight_breakpoint ........... |g:rer#highlight_breakpoint|
        g:rer#repl ........................... |g:rer#repl|
        g:rer#repl_args ...................... |g:rer#repl_args|
        g:rer#save ........................... |g:rer#save|
        g:rer#r_options ...................... |g:rer#r_options|
        g:rer#handlers ....................... |g:rer#handlers|
        g:rer#tags_patterns .................. |g:rer#tags_patterns|
        g:rer#tags_cmd ....................... |g:rer#tags_cmd|
        rer#Keyword .......................... |rer#Keyword()|
        rer#Inspect .......................... |rer#Inspect()|
        rer#CommandComplete .................. |rer#CommandComplete()|
        rer#Completions ...................... |rer#Completions()|
        rer#FunctionArgs ..................... |rer#FunctionArgs()|
        rer#R_setwd .......................... |rer#R_setwd()|
        rer#Cd ............................... |rer#Cd()|
        rer#RVal ............................. |rer#RVal()|
        rer#RDict ............................ |rer#RDict()|
        rer#SourceBuffer ..................... |rer#SourceBuffer()|
        rer#Debug ............................ |rer#Debug()|
        rer#Undebug .......................... |rer#Undebug()|
        rer#GetBreakpointsAsQFL .............. |rer#GetBreakpointsAsQFL()|
        rer#SetBreakpoint .................... |rer#SetBreakpoint()|
        rer#ResetBreakpoints ................. |rer#ResetBreakpoints()|
        rer#SendR ............................ |rer#SendR()|
        rer#Quicklist ........................ |rer#Quicklist()|
        rer#EditItem ......................... |rer#EditItem()|
        rer#Tags ............................. |rer#Tags()|
        rer#GetClient ........................ |rer#GetClient()|
        rer#Send ............................. |rer#Send()|
        g:rescreen#repl#rer#shell ............ |g:rescreen#repl#rer#shell|
        prototype.ExitRepl
        prototype.WrapResultPrinter
        prototype.SetTempFile
        prototype.WrapResultWriter
        rescreen#repl#rer#Extend ............. |rescreen#repl#rer#Extend()|
        prototype.Init
        prototype.Send
        prototype.Filename
        prototype.EvaluateInSession
        rer#client#rescreen#GetPrototype ..... |rer#client#rescreen#GetPrototype()|
        rer#client#rescreen#Ftplugin ......... |rer#client#rescreen#Ftplugin()|
        prototype.Init
        prototype.Send
        prototype.EvaluateInSession
        rer#client#rserve#GetPrototype ....... |rer#client#rserve#GetPrototype()|
        rer#client#rserve#Ftplugin ........... |rer#client#rserve#Ftplugin()|
        tinykeymap#rdebug#Send ............... |tinykeymap#rdebug#Send()|
        tinykeymap#rdebug#Input .............. |tinykeymap#rdebug#Input()|
        tinykeymap#rdebug#UnkownKey .......... |tinykeymap#rdebug#UnkownKey()|


========================================================================
plugin/rer.vim~

                                                    *:Rer*
:Rer
    Send some code to R.


========================================================================
ftplugin/r/rer.vim~

                                                    *n_K*
n_K ... :call rer#Keyword()<cr>
    See |rer#Keyword()| and |K|.

                                                    *n_<LocalLeader>K*
n_<LocalLeader>K ... :call rer#Inspect()<cr>
    Inspect an R object -- see |rer#Inspect()|.

                                                    *:Rerhelp*
:Rerhelp

                                                    *:Rcd*
:Rcd
    Set R's working directory to the current buffer's directory.

                                                    *:Rsource*
:Rsource
    Source the current buffer in R.

                                                    *:Rdebug*
:Rdebug [FUNCTION]
    Debug or undebug FUNCTION.

                                                    *:Rdebugger*
:Rdebugger

                                                    *:RBreakpoint*
RBreakpoint [FILENAME]
    List and remove breakpoints.
    If FILENAME is "%", the current buffer is used.

                                                    *:RResetBreakpoints*
:RResetBreakpoints

                                                    *:Rtags*
:Rtags

                                                    *n_<c-r><c-r>*
n_<c-r><c-r> ... :call rer#Send(getline("."))<cr>

                                                    *i_<c-r><c-r>*
i_<c-r><c-r> ... <c-\><c-o><c-r><c-r>

                                                    *x_<c-r><c-r>*
x_<c-r><c-r> ... :call rer#Send(join(tlib#selection#GetSelection("v"), "\n"))<cr>

                                                    *s_<c-r><c-r>*
s_<c-r><c-r> ... <c-o><c-r><c-r>

                                                    *n_<c-r><c-s>*
n_<c-r><c-s> ... :Rsource<cr>

                                                    *n_<c-r><c-e>*
n_<c-r><c-e> ... vip<c-r><c-r>

                                                    *<c-r>1*
<c-r>1 ... K


========================================================================
autoload/rer.vim~

                                                    *g:rer#quicklist*
g:rer#quicklist                (default: ['??"%s"', 'str(%s)', 'summary(%s)', 'head(%s)', 'edit(%s)', 'fix(%s)', 'debugger()', 'traceback()', 'install.packages("%s")', 'update.packages()', 'example("%s")', 'graphics.off()'])

                                                    *g:rer#client_name*
g:rer#client_name              (default: 'rescreen')
    The name of the client that talks to R.

    Currently supported values:
      rescreen ... Use the rescreen_vim VIM plugin

                                                    *g:rer#mapleader*
g:rer#mapleader                (default: '<LocalLeader>r')

                                                    *g:rer#support_maps*
g:rer#support_maps             (default: ['statet'])
    A list of map names. Enable maps similar to:
    - statet

                                                    *g:rer#map_eval*
g:rer#map_eval                 (default: '<c-cr>')

                                                    *g:rer#map_eval_and_print*
g:rer#map_eval_and_print       (default: '<c-s-cr>')

                                                    *g:rer#convert_path*
g:rer#convert_path             (default: '')

                                                    *g:rer#highlight_debug*
g:rer#highlight_debug          (default: 'SpellRare')
    Highlight group for debugged functions.

                                                    *g:rer#highlight_breakpoint*
g:rer#highlight_breakpoint     (default: 'SpellBad')
    Highlight group for breakpoint

                                                    *g:rer#repl*
g:rer#repl                     (default: executable('Rterm') ? 'Rterm --ess' : 'R')

                                                    *g:rer#repl_args*
g:rer#repl_args                (default: '')

                                                    *g:rer#save*
g:rer#save                     (default: 1)
    Values:
        0 ... Don't save the image
        1 ... Save an image only if a file .Rdata exists
        2 ... Always save an image

                                                    *g:rer#r_options*
g:rer#r_options                (default: '')
    Options (as string) passed to R.
    Example:>

      let g:rer#r_options = 'warn = 1'.(has('gui_running') ? ', help_type = "html"' : '')

                                                    *g:rer#handlers*
g:rer#handlers                 (default: [{'key': 5, 'agent': 'rer#EditItem', 'key_name': '<c-e>', 'help': 'Edit item'}])

                                                    *g:rer#tags_patterns*
g:rer#tags_patterns            (default: '*.R */*.R')

                                                    *g:rer#tags_cmd*
g:rer#tags_cmd                 (default: (has('win32') || has('win64') ? 'ctags.exe' : 'ctags') .' -R '. g:rer#tags_patterns)

                                                    *rer#Keyword()*
rer#Keyword(?word = "", ?help_type = "")

                                                    *rer#Inspect()*
rer#Inspect(...)
    Inspect the word under the cursor.

                                                    *rer#CommandComplete()*
rer#CommandComplete(ArgLead, CmdLine, CursorPos)

                                                    *rer#Completions()*
rer#Completions(base, ...)
    Omnicompletion for R.
    If the base pattern contains no period ".", matches with periods are 
    removed from the list of possible completions.
    See also 'omnifunc'.

                                                    *rer#FunctionArgs()*
rer#FunctionArgs(word)

                                                    *rer#R_setwd()*
rer#R_setwd(client)

                                                    *rer#Cd()*
rer#Cd()

                                                    *rer#RVal()*
rer#RVal(value)

                                                    *rer#RDict()*
rer#RDict(dict)

                                                    *rer#SourceBuffer()*
rer#SourceBuffer(bufnr, ?nativeSource = FALSE)

                                                    *rer#Debug()*
rer#Debug(fn)
    Toggle the debug status of a function.

                                                    *rer#Undebug()*
rer#Undebug(fn)
    Undebug a debugged function.

                                                    *rer#GetBreakpointsAsQFL()*
rer#GetBreakpointsAsQFL()

                                                    *rer#SetBreakpoint()*
rer#SetBreakpoint(filename, bplnums)
    This function uses the basename of the filename argument. I.e. if you 
    have more than one file with a given basename is loaded in R, trouble 
    may follow.

                                                    *rer#ResetBreakpoints()*
rer#ResetBreakpoints()

                                                    *rer#SendR()*
rer#SendR(word)

                                                    *rer#Quicklist()*
rer#Quicklist(word)

                                                    *rer#EditItem()*
rer#EditItem(world, items)

                                                    *rer#Tags()*
rer#Tags()

                                                    *rer#GetClient()*
rer#GetClient()

                                                    *rer#Send()*
rer#Send(code, ...)


========================================================================
autoload/rescreen/repl/rer.vim~

                                                    *g:rescreen#repl#rer#shell*
g:rescreen#repl#rer#shell      (default: g:rescreen#shell)

prototype.ExitRepl

prototype.WrapResultPrinter

prototype.SetTempFile

prototype.WrapResultWriter

                                                    *rescreen#repl#rer#Extend()*
rescreen#repl#rer#Extend(dict)


========================================================================
autoload/rer/client/rescreen.vim~

prototype.Init

prototype.Send

prototype.Filename

prototype.EvaluateInSession

                                                    *rer#client#rescreen#GetPrototype()*
rer#client#rescreen#GetPrototype()

                                                    *rer#client#rescreen#Ftplugin()*
rer#client#rescreen#Ftplugin()


========================================================================
autoload/rer/client/rserve.vim~

prototype.Init

prototype.Send

prototype.EvaluateInSession

                                                    *rer#client#rserve#GetPrototype()*
rer#client#rserve#GetPrototype()

                                                    *rer#client#rserve#Ftplugin()*
rer#client#rserve#Ftplugin()


========================================================================
autoload/tinykeymap/rdebug.vim~

                                                    *tinykeymap#rdebug#Send()*
tinykeymap#rdebug#Send(string)

                                                    *tinykeymap#rdebug#Input()*
tinykeymap#rdebug#Input(string)

                                                    *tinykeymap#rdebug#UnkownKey()*
tinykeymap#rdebug#UnkownKey(chars, count)



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
